{% extends 'base.html.twig' %}
{% form_theme formTrip _self %}

 {% block stylesheets %}

{#     <link rel="stylesheet" href="/jQueryUI/jquery-ui.css">#}
     <style>
         div[id^=block_trip_tripinvestigators_] {
             margin-bottom: 3px!important;
         }
     </style>

{#     <!-- CSS file -->#}
{#     <link rel="stylesheet" href="/EasyAutocomplete-1.3.5/easy-autocomplete.min.css">#}

{#     <!-- Additional CSS Themes file - not required-->#}
{#     <link rel="stylesheet" href="/EasyAutocomplete-1.3.5/easy-autocomplete.themes.min.css">#}

 {% endblock %}

{% block body %}
    <div class="container">

        <div class="card">
            <div class="card-header">
                <h3>Trip  {{ trip.startdate | date('m/d/Y')}} - {{ trip.enddate | date('m/d/Y')}}</h3>
                <p>Destination: {{ trip.destinationarea }}</p>
                <p>Cruise {{ trip.cruiseid.getPlanCode }}</p>
                <p>Campaign(s):
                    {% for campaign in trip.cruiseid.campaign %}
                        "{{ campaign.campaign }}"
                        {% if loop.last %}{% else %}, {% endif %}
                    {% endfor %}
                    </p>
            </div>
        </div>


        {{form_start(formTrip)}}


        <div class="row">
            <div class="col">
                {{ form_row(formTrip.startdate) }}
            </div>
            <div class="col">
                {{ form_row(formTrip.enddate) }}
            </div>
        </div>



{#        <div class="row">#}
        {{ form_widget(formTrip) }}
{#        </div>#}
        <button type="submit" class="btn btn-warning">Submit modifications</button>
{#        <a href="{{ path('cruise_details', {'cruiseId' : trip.cruiseid.cruiseid })}}" class="btn btn-outline-primary">Back to cruise</a>#}
{#        {% dump (trip.cruiseid.cruiseid) %}#}
        {{form_end(formTrip)}}



    </div>
{% endblock %}

{# The following two block are just there to allow hiding some fields#}
{#{% block datetime_row %}#}{#<p>{{ id }}</p>#}{#{% endblock %}#}
{#{% block text_row %}#}{# <p>{{ id }}</p>#}{#{% endblock %}#}


{% block _trip_tripinvestigators_entry_widget %}
<div class="form-group" id="block_{{ id }}">


               <div class="row">
                <div class="col">
                    {{ form_widget(form.firstname) }}
                </div>
                <div class="col">
                    {{ form_widget(form.surname) }}
                </div>
                <div class="col">
                    <button type="button" class="btn btn-danger" id="remove-tripinvestigator"
                            data-action="delete" data-target="#block_{{ id }}" >
                        <i class="fa fa-trash"></i>
                    </button>
                </div>
    </div>
</div>




{% endblock %}

{% block _trip_tripinvestigators_widget %}
        {{ form_widget(form) }}
    <input type="hidden" id="widgets-counter" value="0">
    <div class="form-group">
        <button type="button" id="add-tripinvestigator" class="btn btn-success">Add investigator</button>
    </div>

{% endblock %}

{# Here we force the form to not display label 0, 1,... 0only widget in row...#}
{#{% block _trip_tripinvestigators_entry_row %}#}
{#    {{ form_widget(form) }}#}
{#{% endblock %}#}

{% block javascripts %}

    <script src="/js/addTripinvestigatorsToTrip.js"></script>

{#    <script>#}
{#        $('#add-tripinvestigator').click(function(){#}
{#            const index = +$('#widgets-counter').val();#}
{#            console.log(index);#}
{#            const tmpl = $('#trip_tripinvestigators').data('prototype').replace(/__name__/g, index);#}
{#            // console.log(tmpl);#}
{#            $('#trip_tripinvestigators').append(tmpl);#}

{#            // $("[id^=block_trip_tripinvestigators]").removeClass('col-6');#}
{#            //#}
{#            // $("[id^=block_trip_tripinvestigators]").addClass('col-6');#}
{#            $("[id$=surname]").prop('autocomplete', 'off');#}

{#            $('#widgets-counter').val(index+1);#}

{#            handleDeleteButtons();#}

{#            easyAutocompleteTrial()#}

{#        })#}

{#        function updateCounter(){#}
{#            const count = $('#trip_tripinvestigators div.form-group').length;#}
{#            console.log('count' + count);#}
{#            $('#widgets-counter').val(count);#}
{#        }#}

{#        function handleDeleteButtons(){#}
{#            $('button[data-action="delete"]').click(function(){#}
{#                const target=this.dataset.target;#}
{#                // console.log(target);#}
{#                $(target).remove();#}
{#            })#}
{#        }#}
{#        //#}
{#        updateCounter();#}
{#        easyAutocompleteTrial();#}
{#        handleDeleteButtons();#}

{#    </script>#}

{#    <!-- JS file -->#}
{#    <script src="/EasyAutocomplete-1.3.5/jquery.easy-autocomplete.min.js"></script>#}

{#    <script>#}
{#        function easyAutocompleteTrial(){#}
{#            var options = {#}
{#                data: ["blue", "green", "pink", "red", "yellow"]#}
{#            };#}

{#            $("[id$=surname]").easyAutocomplete(options);#}
{#            $("#basics").easyAutocomplete(options);#}
{#        }#}


{#    </script>#}


























{#    <script src="/jquery-ui-1.12.1/external/jquery/jquery.js"></script>#}
{#    <script src="/jquery-ui-1.12.1/jquery-ui.js"></script>#}

{#    <script>#}

{#        $(document).ready(function(){#}
{#            $("[id$=surname]").prop('autocomplete', 'off');#}
{#        });#}

{#            var availableTags = [#}
{#                "ActionScript",#}
{#                "AppleScript",#}
{#                "Asp",#}
{#                "BASIC",#}
{#                "C",#}
{#                "C++",#}
{#                "Clojure",#}
{#                "COBOL",#}
{#                "ColdFusion",#}
{#                "Erlang",#}
{#                "Fortran",#}
{#                "Groovy",#}
{#                "Haskell",#}
{#                "Java",#}
{#                "JavaScript",#}
{#                "Lisp",#}
{#                "Perl",#}
{#                "PHP",#}
{#                "Python",#}
{#                "Ruby",#}
{#                "Scala",#}
{#                "Scheme"#}
{#            ];#}
{#            // $( "[id$=surname]" ).autocomplete({#}
{#            //     source: availableTags});#}
{#        $( "#essai" ).autocomplete({#}
{#            source: availableTags});#}

{#    </script>#}
{#    <script>#}

{#                $(document).ready(function(){#}
{#                    $("form").prop('autocomplete', 'off');#}
{#                });#}

{#        var countries = ["Afghanistan","Albania","Algeria","Andorra","Angola","Anguilla","Antigua &amp; Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia &amp; Herzegovina","Botswana","Brazil","British Virgin Islands","Brunei","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central Arfrican Republic","Chad","Chile","China","Colombia","Congo","Cook Islands","Costa Rica","Cote D Ivoire","Croatia","Cuba","Curacao","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Ethiopia","Falkland Islands","Faroe Islands","Fiji","Finland","France","French Polynesia","French West Indies","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guam","Guatemala","Guernsey","Guinea","Guinea Bissau","Guyana","Haiti","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Mauritania","Mauritius","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauro","Nepal","Netherlands","Netherlands Antilles","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","North Korea","Norway","Oman","Pakistan","Palau","Palestine","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russia","Rwanda","Saint Pierre &amp; Miquelon","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Korea","South Sudan","Spain","Sri Lanka","St Kitts &amp; Nevis","St Lucia","St Vincent","Sudan","Suriname","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","Timor L'Este","Togo","Tonga","Trinidad &amp; Tobago","Tunisia","Turkey","Turkmenistan","Turks &amp; Caicos","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States of America","Uruguay","Uzbekistan","Vanuatu","Vatican City","Venezuela","Vietnam","Virgin Islands (US)","Yemen","Zambia","Zimbabwe"];#}

{#        function autocomplete(inp, arr) {#}
{#            /*the autocomplete function takes two arguments,#}
{#            the text field element and an array of possible autocompleted values:*/#}
{#            var currentFocus;#}
{#            /*execute a function when someone writes in the text field:*/#}
{#            inp.addEventListener("input", function(e) {#}
{#                var a, b, i, val = this.value;#}
{#                /*close any already open lists of autocompleted values*/#}
{#                closeAllLists();#}
{#                if (!val) { return false;}#}
{#                currentFocus = -1;#}
{#                /*create a DIV element that will contain the items (values):*/#}
{#                a = document.createElement("DIV");#}
{#                a.setAttribute("id", this.id + "autocomplete-list");#}
{#                a.setAttribute("class", "autocomplete-items");#}
{#                /*append the DIV element as a child of the autocomplete container:*/#}
{#                this.parentNode.appendChild(a);#}
{#                /*for each item in the array...*/#}
{#                for (i = 0; i < arr.length; i++) {#}
{#                    /*check if the item starts with the same letters as the text field value:*/#}
{#                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {#}
{#                        /*create a DIV element for each matching element:*/#}
{#                        b = document.createElement("DIV");#}
{#                        /*make the matching letters bold:*/#}
{#                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";#}
{#                        b.innerHTML += arr[i].substr(val.length);#}
{#                        /*insert a input field that will hold the current array item's value:*/#}
{#                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";#}
{#                        /*execute a function when someone clicks on the item value (DIV element):*/#}
{#                        b.addEventListener("click", function(e) {#}
{#                            /*insert the value for the autocomplete text field:*/#}
{#                            inp.value = this.getElementsByTagName("input")[0].value;#}
{#                            /*close the list of autocompleted values,#}
{#                            (or any other open lists of autocompleted values:*/#}
{#                            closeAllLists();#}
{#                        });#}
{#                        a.appendChild(b);#}
{#                    }#}
{#                }#}
{#            });#}
{#            /*execute a function presses a key on the keyboard:*/#}
{#            inp.addEventListener("keydown", function(e) {#}
{#                var x = document.getElementById(this.id + "autocomplete-list");#}
{#                if (x) x = x.getElementsByTagName("div");#}
{#                if (e.keyCode == 40) {#}
{#                    /*If the arrow DOWN key is pressed,#}
{#                    increase the currentFocus variable:*/#}
{#                    currentFocus++;#}
{#                    /*and and make the current item more visible:*/#}
{#                    addActive(x);#}
{#                } else if (e.keyCode == 38) { //up#}
{#                    /*If the arrow UP key is pressed,#}
{#                    decrease the currentFocus variable:*/#}
{#                    currentFocus--;#}
{#                    /*and and make the current item more visible:*/#}
{#                    addActive(x);#}
{#                } else if (e.keyCode == 13) {#}
{#                    /*If the ENTER key is pressed, prevent the form from being submitted,*/#}
{#                    e.preventDefault();#}
{#                    if (currentFocus > -1) {#}
{#                        /*and simulate a click on the "active" item:*/#}
{#                        if (x) x[currentFocus].click();#}
{#                    }#}
{#                }#}
{#            });#}
{#            function addActive(x) {#}
{#                /*a function to classify an item as "active":*/#}
{#                if (!x) return false;#}
{#                /*start by removing the "active" class on all items:*/#}
{#                removeActive(x);#}
{#                if (currentFocus >= x.length) currentFocus = 0;#}
{#                if (currentFocus < 0) currentFocus = (x.length - 1);#}
{#                /*add class "autocomplete-active":*/#}
{#                x[currentFocus].classList.add("autocomplete-active");#}
{#            }#}
{#            function removeActive(x) {#}
{#                /*a function to remove the "active" class from all autocomplete items:*/#}
{#                for (var i = 0; i < x.length; i++) {#}
{#                    x[i].classList.remove("autocomplete-active");#}
{#                }#}
{#            }#}
{#            function closeAllLists(elmnt) {#}
{#                /*close all autocomplete lists in the document,#}
{#                except the one passed as an argument:*/#}
{#                var x = document.getElementsByClassName("autocomplete-items");#}
{#                for (var i = 0; i < x.length; i++) {#}
{#                    if (elmnt != x[i] && elmnt != inp) {#}
{#                        x[i].parentNode.removeChild(x[i]);#}
{#                    }#}
{#                }#}
{#            }#}
{#            /*execute a function when someone clicks in the document:*/#}
{#            document.addEventListener("click", function (e) {#}
{#                closeAllLists(e.target);#}
{#            });#}
{#        }#}

{#        // $( "[id$=surname]" ).autocomplete(countries);#}
{#        $("[id$=_surname]").addClass('forAutocomplete');#}

{#        autocomplete(document.getElementById("trip_tripinvestigators_0_surname"), countries);#}
{#    </script>#}



{% endblock %}